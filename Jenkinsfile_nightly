#!groovy

properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 8 * * 1-5')]),
  parameters([
    string(
      name: 'CITIZEN_FRONTEND_BASE_URL',
      defaultValue: 'https://nfdiv.aat.platform.hmcts.net/',
      description: 'The Citizen URL to test against'
    ),
    string(
      name: 'MANAGE_CASES_BASE_URL',
      defaultValue: 'https://manage-case.aat.platform.hmcts.net/cases',
      description: 'The Manage Cases URL to test against'
    ),
    string(
      name: 'FUNCTIONAL_TESTS_WORKERS',
      description: 'Number of workers running functional tests'
    ),
    booleanParam(
      name: 'skipCitizenTests',
      defaultValue: false,
      description: 'Tick the checkbox for skipping Citizen application tests.'
    ),
    booleanParam(
      name: 'skipManageCasesTests',
      defaultValue: false,
      description: 'Tick the checkbox for skipping Manage Cases application tests.'
    ),
    string(
      name: 'tag',
      defaultValue: '',
      description: 'Test tag to be used'
    ),
    choice(
      name: 'browser',
      choices: ['chromium', 'firefox', 'webkit', 'MicrosoftEdge', 'MobileChrome', 'MobileSafari'],
      description: 'Which browser to use'
    ),
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "nfdiv"
def component = "manage-case-e2e-tests"
def channel = "#no-fault-divorce-builds"

static Map < String, Object > secret(String secretName, String envVariable) {
  [
    $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def matchingEnv = "aat"

if(params.skipManageCasesTests) {
  matchingEnv = params.CITIZEN_FRONTEND_BASE_URL.contains("demo") ? "demo" : matchingEnv
} else {
  matchingEnv = params.MANAGE_CASES_BASE_URL.contains("demo") ? "demo" : matchingEnv
}

def secrets = [
        'nfdiv-${env}'    :[
                secret('e2e-test-user-password', 'TEST_PASSWORD'),
                secret('frontend-secret', 'SERVICE_AUTH_SECRET'),
                secret('idam-secret', 'IDAM_SECRET'),
                secret('pcq-token-key', 'PCQ_TOKEN'),
                secret('playwright-service-url', 'PLAYWRIGHT_SERVICE_URL'),
                secret('playwright-token', 'PLAYWRIGHT_SERVICE_ACCESS_TOKEN'),
                secret('idam-testing-support-users-url', 'IDAM_TESTING_SUPPORT_USERS_URL'),
        ]
]

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline(type, product, component, 600) {
  loadVaultSecrets(secrets)
  env.CITIZEN_FRONTEND_BASE_URL = params.CITIZEN_FRONTEND_BASE_URL
  env.MANAGE_CASES_BASE_URL = params.MANAGE_CASES_BASE_URL
  env.FUNCTIONAL_TESTS_WORKERS = params.FUNCTIONAL_TESTS_WORKERS
  enableSlackNotifications(channel)

  afterAlways('DependencyCheckNightly') {
    stage('Unit tests') {
      try {
        yarnBuilder.yarn('test:unit')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
    if(params.tag) {
      stage("${params.tag} tests - ${params.browser}") {
        try {
          yarnBuilder.yarn('playwright install --with-deps')
          yarnBuilder.yarn("playwright test --grep ${params.tag} --project ${params.browser}")
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: "${params.tag} tests - ${params.browser}"
          ])
          steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/CitizenFunctional/*'
        }
      }
    } else {
      if (!params.skipCitizenTests) {
        stage('Citizen E2E tests - Chrome with accessibility') {
          try {
            yarnBuilder.yarn('test:citizenFrontendChrome')
          } catch (Error) {
            unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
          } finally {
            publishHTML([
              allowMissing: true,
              alwaysLinkToLastBuild: true,
              keepAll: true,
              reportDir: "playwright-report",
              reportFiles: 'index.html',
              reportName: 'Citizen Chrome E2E Test Report'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/CitizenFunctional/*'
          }
        }
        stage('Citizen E2E tests Smoke - Firefox') {
          try {
            yarnBuilder.yarn('test:citizenFrontendFirefox')
          } catch (Error) {
            unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
          } finally {
            publishHTML([
              allowMissing: true,
              alwaysLinkToLastBuild: true,
              keepAll: true,
              reportDir: "playwright-report",
              reportFiles: 'index.html',
              reportName: 'Citizen Firefox E2E Test Report'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/CitizenFunctional/*'
          }
        }
        stage('Citizen E2E tests Smoke - Webkit') {
          try {
            yarnBuilder.yarn('test:citizenFrontendSafari')
          } catch (Error) {
            unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
          } finally {
            publishHTML([
              allowMissing: true,
              alwaysLinkToLastBuild: true,
              keepAll: true,
              reportDir: "playwright-report",
              reportFiles: 'index.html',
              reportName: 'Citizen Webkit E2E Test Report'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/CitizenFunctional/*'
          }
        }
      }
      if (!params.skipManageCasesTests) {
        stage('Manage Cases E2E tests - Chrome with accessibility') {
          try {
            yarnBuilder.yarn('test:manageCasesChrome')
          } catch (Error) {
            unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
          } finally {
            publishHTML([
              allowMissing: true,
              alwaysLinkToLastBuild: true,
              keepAll: true,
              reportDir: "playwright-report",
              reportFiles: 'index.html',
              reportName: 'Manage Cases Chrome E2E Test Report'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/ManageCasesFunctional/*'
          }
        }
        stage('Manage Cases E2E tests Smoke - Firefox') {
          try {
            yarnBuilder.yarn('test:manageCasesFirefox')
          } catch (Error) {
            unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
          } finally {
            publishHTML([
              allowMissing: true,
              alwaysLinkToLastBuild: true,
              keepAll: true,
              reportDir: "playwright-report",
              reportFiles: 'index.html',
              reportName: 'Manage Cases Firefox E2E Test Report'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/ManageCasesFunctional/*'
          }
        }
        stage('Manage Cases E2E tests Smoke - Webkit') {
          try {
            yarnBuilder.yarn('test:manageCasesSafari')
          } catch (Error) {
            unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
          } finally {
            publishHTML([
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: "playwright-report",
                    reportFiles: 'index.html',
                    reportName: 'Manage Cases Webkit E2E Test Report'
            ])
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/ManageCasesFunctional/*'
          }
        }
      }
    }
  }
}
