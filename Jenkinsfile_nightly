#!groovy

@Library("Infrastructure")

properties([
  // Currently, we run this pipeline on the first monday of every month (for resources sake)
  // If you want to run this nightly, uncomment the below line
  // pipelineTriggers([cron('H 8 * * 1-5')]),
  pipelineTriggers([cron('H 8 1-7 * 1')]),
  disableConcurrentBuilds(),
  parameters([
    string(
      name: 'CITIZEN_FRONTEND_BASE_URL',
      defaultValue: 'https://nfdiv.aat.platform.hmcts.net/',
      description: 'The Citizen URL to test against'
    ),
    string(
      name: 'MANAGE_CASES_BASE_URL',
      defaultValue: 'https://manage-case.aat.platform.hmcts.net/cases',
      description: 'The Manage Cases URL to test against'
    ),
    string(
      name: 'FUNCTIONAL_TESTS_WORKERS',
      defaultValue: '4',
      description: 'Number of workers running functional tests'
    ),
    string(
      name: 'TAGS_TO_RUN',
      defaultValue: '',
      description: 'Optionally, run a single or multiple tags (comma separated e.g. @cui, @exui)'
    ),
  ])
])

@Library("Infrastructure")

// Replace these with your own teams info
def type = "nodejs"
def product = "nfdiv"
def component = "manage-case-e2e-tests"
def channel = "#no-fault-divorce-builds"

static Map < String, Object > secret(String secretName, String envVariable) {
  [
    $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def secrets = [
        'nfdiv-${env}'    :[
                secret('e2e-test-user-password', 'TEST_PASSWORD'),
                secret('frontend-secret', 'SERVICE_AUTH_SECRET'),
                secret('idam-secret', 'IDAM_SECRET'),
                secret('pcq-token-key', 'PCQ_TOKEN'),
                secret('playwright-service-url', 'PLAYWRIGHT_SERVICE_URL'),
                secret('playwright-token', 'PLAYWRIGHT_SERVICE_ACCESS_TOKEN'),
  ]
]

def buildPlaywrightCommand(tags) {
  if (tags == null || tags.trim().isEmpty()) {
    return;
  }
  def tagList = tags.split(',').collect { it.trim() }
  def command = 'playwright test tests/'
    tagList.each { tag ->
    if (!tag.isEmpty()) {
      command += " --grep ${tag}"
    }
  }
  return command
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline(type, product, component, 600) {
  loadVaultSecrets(secrets)
  env.CITIZEN_FRONTEND_BASE_URL = params.CITIZEN_FRONTEND_BASE_URL
  env.MANAGE_CASES_BASE_URL = params.MANAGE_CASES_BASE_URL
  env.FUNCTIONAL_TESTS_WORKERS = params.FUNCTIONAL_TESTS_WORKERS
  enableSlackNotifications(channel)

  afterAlways('DependencyCheckNightly') {
    stage('Set up playwright') {
      try {
        yarnBuilder.yarn('setup')
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
    if (!TAGS_TO_RUN.isEmpty()) {
      stage("${TAGS_TO_RUN} E2E Tests") {
        try {
          currentBuild.displayName = "${TAGS_TO_RUN} E2E Tests"
          yarnBuilder.yarn(buildPlaywrightCommand(TAGS_TO_RUN))
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: "${TAGS_TO_RUN} E2E Tests"
          ])
        }
      }
    } else {
      currentBuild.displayName = "All E2E Tests"
      stage('Chrome E2E Tests') {
        try {
          yarnBuilder.yarn('test:chrome')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Chrome E2E Tests'
          ])
        }
      }
      stage('Firefox E2E Tests') {
        try {
          yarnBuilder.yarn('test:firefox')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Firefox E2E Tests'
          ])
        }
      }
      stage('Webkit E2E Tests') {
        try {
          yarnBuilder.yarn('test:webkit')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Webkit E2E Tests'
          ])
        }
      }
      stage('Accessibiity Tests') {
        try {
          yarnBuilder.yarn('test:a11y')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            keepAll: true,
            reportDir: "playwright-report",
            reportFiles: 'index.html',
            reportName: 'Accessibility Tests'
          ])
        }
      }
    }
  }
}
